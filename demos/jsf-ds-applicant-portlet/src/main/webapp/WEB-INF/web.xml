<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">

	<!-- Seting the JSF 2 PROJECT_STAGE to Development will cause the JSF implementation will do the following at runtime: -->
	<!-- 1. Log more verbose messages. -->
	<!-- 2. Render tips and/or warnings in the view markup. -->
	<!-- 3. Cause the default ExceptionHandler to display a developer-friendly error page. -->
	<context-param>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>${project.stage}</param-value>
	</context-param>
	<context-param>
		<param-name>javax.faces.WEBAPP_RESOURCES_DIRECTORY</param-name>
		<param-value>/WEB-INF/resources</param-value>
	</context-param>
	<!-- Instruct Mojarra to namespace parameters according to NamingContainer rules. -->
	<!-- JAVASERVERFACES-3031 -->
	<context-param>
		<param-name>com.sun.faces.namespaceParameters</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- The PluginContextListener is specified because the Liferay Portal auto-deploy process is bypassed for pre-configured WABs. -->
	<listener>
		<listener-class>com.liferay.portal.kernel.servlet.PluginContextListener</listener-class>
	</listener>

	<!-- Although the FacesServlet will not be invoked by any portlet requests, it is required to initialize JSF. -->
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- MyFaces will not initialize unless a servlet-mapping to the Faces Servlet is present. -->
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
	</servlet-mapping>

	<!-- The PortletServlet (servlet-class and init-param) and corresponding servlet-mapping are specified because the Liferay Portal auto-deploy process is bypassed for pre-configured WABs. -->
	<servlet>
		<servlet-name>Portlet Servlet</servlet-name>
		<servlet-class>com.liferay.portal.kernel.servlet.PortletServlet</servlet-class>
			<init-param>
				<param-name>portlet-class</param-name>
				<param-value>com.liferay.faces.demos.portlet.ApplicantFacesPortlet</param-value>
			</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- "portlet-servlet" is the magic context that is needed for any portlet that does not add an InvokerFilter layer -->
	<servlet-mapping>
		<servlet-name>Portlet Servlet</servlet-name>
		<url-pattern>/portlet-servlet/*</url-pattern>
	</servlet-mapping>

	<security-constraint>
		<display-name>Prevent direct access to Facelet XHTML</display-name>
		<web-resource-collection>
			<web-resource-name>Facelet XHTML</web-resource-name>
			<url-pattern>*.xhtml</url-pattern>
		</web-resource-collection>
		<auth-constraint/>
	</security-constraint>
</web-app>
